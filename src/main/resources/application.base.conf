system {

  name = "poc_manager"

  server {
    port = 8082
    baseUrl = ""
    swaggerPath = "src/main/scala/com/ubirch/resources/swagger-ui/"
  }

  metrics {
    prometheus {
      port = 4321
    }
  }

  executionContext {
    threadPoolSize = 5
  }

  services {
    dataSchemaGroupMap = """{"bvdw-certificate": "uuid0", "vaccination-v3": "uuid1", "corona-test": "uuid2", "vaccination-bmg-v2":"uuid3"}"""
    trustedPocGroupMap = """{"bvdw-certificate": "uuid0", "vaccination-v3": "uuid1", "corona-test": "uuid2", "vaccination-bmg-v2": "uuid3"}"""
    pocTypeDataSchemaMap = """{"ub_cust_app": "bvdw-certificate", "ub_vac_app": "vaccination-v3", "ub_test_app": "corona-test", "ub_test_api": "corona-test", "bmg_vac_app": "vaccination-bmg-v2", "bmg_vac_api": "vaccination-bmg-v2"}"""
    pocTypeEndpointMap = """{"ub_vac_app": "endpoint1", "ub_vac_api": "endpoint2", "bmg_vac_api": "endpoint3"}"""
    pocTypeLocationNeeded = "bmg_vac_api"
    pocTypeRoleNeeded = "ub_vac_app, ub_vac_api"
    pocAdminGroupId = "pocAdminGroup"
    # urls and tokens for testing
    certifyApiURL = "https://api.certify.dev.ubirch.com/api/identity/v1/register"
    certifyApiToken = "certifyApiToken"
    goClientURL = "not reachable from outside"
    goClientToken = "goClientToken"
    thingApiURLCreateDevice = "https://api.console.dev.ubirch.com/ubirch-web-ui/api/v1/devices/create?with_api_info=true"
    thingApiURLGetInfo = "https://api.console.dev.ubirch.com/ubirch-web-ui/api/v1/devices/api-config"
    certManagerURL = "not reachable"
    certManagerToken = "certManagerToken"
    pocCreationInterval = 2
    pocLogoEndpoint = "https://api.dev.ubirch.com/poc-employee/logo"
  }

  aesEncryption {
    //this config (file) is only used for local and unit testing
    secretKey = "NHQ3dzl6JEMmRilKQE5jUmZValhuMnI1dTh4L0ElRCo="
  }

  teamdrive {
    url = "http://127.0.0.1:4040"
    username = ""
    password = ""
    readTimeout = 500 millis
    ubirchAdmins = "" // comma separated email addresses
    stage = "local"
    certWelcomeMessage = "Willkommen zur Einrichtung der Impfzertifizierungsservice Webanwendung. \n\n  Sofern Sie bereits ein TeamDrive-Konto besitzen, melden Sie sich bitte dort an und akzeptieren Sie die Einladung in den neuen Space. \n Ansonsten schließen Sie bitte die Kontoerstellung bei TeamDrive ab und laden Sie sich das X509 Zertifikat, das zugehörige Passwort."
    staticAssetsWelcomeMessage = "In diesem Space finden Sie die Handbücher und Dokumentationen zum Zertifikatsservice."
    pocTypeStaticSpaceNameMap = """{"bmg_vac_app": "BMG_Dokumentation_Impfzentren_FIDO2"}"""
  }
}

keycloak-certify {
  //this is used to do CRUD actions on certify-keycloak poc-certify
  server {
    url = "http://localhost:8080/auth"
    realm = "master"
    # this config (file) is only used for local and unit testing
    username = admin
    password = admin
    clientId = "admin-cli"
  }
  tokenVerification {
    configURL = "http://localhost:8080/auth/realms/poc-certify/.well-known/openid-configuration"
    kid: "6dMHOUfu7v6howP2WH5bkp-j9UgUYdyEQbWJp8cb8IY"
  }
}

keycloak-device {
  //used to do CRUD actions on device-keycloak ubirch-default-realm
  server {
    url = "http://localhost:8081/auth"
    realm = "master"
    //this config (file) is only used for local testing
    username = admin
    password = admin
    clientId = "admin-cli"
  }
  tokenVerification { //not used at the moment
    configURL = "http://localhost:8081/auth/realms/ubirch-default-realm/.well-known/openid-configuration"
    kid: "tgxjDoFtQP7tzzO6byck4X8vsFRaM5EVz0N66O9CSTg"
  }
}

database {
  dataSourceClassName = org.postgresql.ds.PGSimpleDataSource
  dataSource.user = postgres
  dataSource.password = postgres
  dataSource.databaseName = postgres
  dataSource.portNumber = 5432
  dataSource.serverName = localhost
  connectionTimeout = 30000
}
